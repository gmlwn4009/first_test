        String[][] arr = new String[15][5];
        Calendar now = Calendar.getInstance();

        int year=now.get(Calendar.YEAR);
        int month=now.get(Calendar.MONTH)+1;
        int day=now.get(Calendar.DAY_OF_MONTH);
        int hour=now.get(Calendar.HOUR_OF_DAY);

        for(int a=0; a<15;a++) {
            for (int m = 0; m < 5; m++) {
                arr[a][m] = " ";
            }
        }

        class ggetXML extends AsyncTask<String, Void, String> {

            protected String doInBackground(String... urls) {
                try {

                    int i=0;
                    String text = null;
                    Boolean T3H=Boolean.FALSE;
                    Boolean SKY=Boolean.FALSE;
                    Boolean PTY=Boolean.FALSE;

                    Boolean category = Boolean.FALSE;
                    Boolean fcstTime = Boolean.FALSE;
                    Boolean fcstValue = Boolean.FALSE;
                    Boolean fcstDate = Boolean.FALSE;

                    InputStream stream = downloadUrl(urls[0]);
                    XmlPullParserFactory factory = XmlPullParserFactory.newInstance();
                    XmlPullParser parser = factory.newPullParser();
                    parser.setInput(stream, "UTF-8");

                    int eventType = parser.getEventType();

                    while(eventType != XmlPullParser.END_DOCUMENT){
                        switch (eventType){
                            case XmlPullParser.START_DOCUMENT:
                                break;
                            case XmlPullParser.END_DOCUMENT:
                                break;
                            case XmlPullParser.START_TAG:
                                if(parser.getName().equals("category"))
                                    category=Boolean.TRUE;
                                else if(parser.getName().equals("fcstDate"))
                                    fcstDate = Boolean.TRUE;
                                else if(parser.getName().equals("fcstTime"))
                                    fcstTime = Boolean.TRUE;
                                else if(parser.getName().equals("fcstValue"))
                                    fcstValue = Boolean.TRUE;
                                break;
                            case XmlPullParser.TEXT:
                                text=parser.getText();
                                if(category) {
                                    if(parser.getText().equals("T3H")) {
                                        T3H = Boolean.TRUE;
                                    }
                                    else if(parser.getText().equals("SKY")) {
                                        SKY = Boolean.TRUE;
                                    }
                                    else if(parser.getText().equals("PTY")) {
                                        PTY = Boolean.TRUE;
                                    }
                                    category =Boolean.FALSE;
                                }
                                else if(fcstDate) {
                                    arr[i][0]=text;
                                    fcstDate =Boolean.FALSE;
                                }
                                else if(fcstTime) {
                                    arr[i][1]=text;
                                    fcstTime =Boolean.FALSE;
                                }
                                else if(fcstValue) {
                                    if(T3H){
                                        arr[i][2]=text;
                                        if(i<14) i++;
                                        T3H=Boolean.FALSE;
                                    }
                                    else if(PTY){
                                        arr[i][3]=text;
                                        PTY=Boolean.FALSE;
                                    }
                                    else if(SKY) {
                                        arr[i][4]=text;
                                        SKY=Boolean.FALSE;
                                    }
                                    fcstValue = Boolean.FALSE;
                                }
                                break;
                            case XmlPullParser.END_TAG:
                                if(parser.getName().equals("response"))
                                    break;
                        }
                        eventType = parser.next();
                    }
                    stream.close();

                    return "a";
                } catch (IOException e) {
                    e.printStackTrace();
                    return "IOException error";
                } catch (XmlPullParserException e) {
                    return "XmlPullParserException error";
                }
            }

            protected void onProgressUpdate(Void... values) {
                super.onProgressUpdate(values);
            }

            protected void onPostExecute(String s) {
                super.onPostExecute(s);
                int t=3;

                int now_TIME=hour;
                String now_T3H=null, now_PTY=null, now_SKY=null;

                int k=0;
                for(int num=0;num<24;num=num+3){
                    if(hour>=num && hour<(num+3)){
                        now_TIME = num;
                        now_T3H = arr[k][2];
                        now_PTY = arr[k][3];
                        Log.d("now_pty",now_PTY);
                        now_SKY = arr[k][4];
                    }
                    Log.d(num+"sky",arr[k][4]);
                    Log.d(num+"pty",arr[k][3]);
                    k++;
                }

                if(now_PTY.equals("0")){
                    findViewById(R.id.umbrella).setVisibility(View.INVISIBLE);
                    findViewById(R.id.snowcat).setVisibility(View.INVISIBLE);
                }
                else if(now_PTY.equals("3") || now_PTY.equals("7")){
                    findViewById(R.id.umbrella).setVisibility(View.INVISIBLE);
                    findViewById(R.id.snowcat).setVisibility(View.VISIBLE);
                }
                else{
                    findViewById(R.id.umbrella).setVisibility(View.VISIBLE);
                    findViewById(R.id.snowcat).setVisibility(View.INVISIBLE);
                }
            }

            private InputStream downloadUrl(String urlString) throws IOException {
                URL url = new URL(urlString);
                HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                conn.setReadTimeout(10000 /* milliseconds */);
                conn.setConnectTimeout(15000 /* milliseconds */);
                conn.setRequestMethod("GET");
                conn.setDoInput(true);
                // Starts the query
                conn.connect();
                return conn.getInputStream();
            }
        }

        if(hour<23) {
            String today = String.valueOf(year)+"0"+String.valueOf(month)+String.valueOf(day-1);
            String url2 = "http://apis.data.go.kr/1360000/VilageFcstInfoService/getVilageFcst?" +
                    "serviceKey=kVYcCisbHyjiLHSoknw1iZbhenW6Glc2mM4hfGf1EeIHjXagq6P9g98eMXs6lFGtlksA74tis6Z677Ol%2FjiHrw%3D%3D&" +
                    "numOfRows=225&pageNo=1&base_date=" +
                    today +
                    "&base_time=2300&nx=60&ny=74";
            new ggetXML().execute(url2);
        }
        else{
            String today = String.valueOf(year)+"0"+String.valueOf(month)+String.valueOf(day);
            String url2 = "http://apis.data.go.kr/1360000/VilageFcstInfoService/getVilageFcst?" +
                    "serviceKey=kVYcCisbHyjiLHSoknw1iZbhenW6Glc2mM4hfGf1EeIHjXagq6P9g98eMXs6lFGtlksA74tis6Z677Ol%2FjiHrw%3D%3D&" +
                    "numOfRows=225&pageNo=1&base_date=" +
                    today +
                    "&base_time=" +
                    "&nx=60&ny=74";
            new ggetXML().execute(url2);
        }
    }
